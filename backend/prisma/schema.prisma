// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model Post {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   title     String   @db.VarChar(255)
//   content   String?
//   published Boolean  @default(false)
//   author    User     @relation(fields: [authorId], references: [id])
//   authorId  Int
// }

// model Profile {
//   id     Int     @id @default(autoincrement())
//   bio    String?
//   user   User    @relation(fields: [userId], references: [id])
//   userId Int     @unique
// }

// model User {
//   id      Int      @id @default(autoincrement())
//   email   String   @unique
//   name    String?
//   posts   Post[]
//   profile Profile?
// }

model Category {
  id               String     @id @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title            String     @db.VarChar(255)
  url              String     @db.VarChar(255)
  imgUrl           String?    @db.VarChar(255)
  parent           Category?  @relation("CategoryParent", fields: [parentID], references: [id])
  categoryAsParent Category[] @relation("CategoryParent")
  parentID         String?
  products         Product[]
}

model Product {
  id          String   @id @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String   @db.VarChar(255)
  description String?  @db.Text
  imgUrl      String?  @db.VarChar(255)
  docUrl      String?  @db.VarChar(255)
  available   Boolean  @default(true)
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model News {
  id        String   @id @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title     String   @db.VarChar(255)
  text      String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id       String  @id @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email    String  @unique
  name     String?
  password String

  Feedback Feedback[]
}

model Feedback {
  id        String   @id @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  text      String   @db.Text
  stars     Float
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String   @db.Uuid
  createdAt DateTime @default(now())
}
